import : LibWeb / webdevice
import : LibWeb / dom

obj:CodeEditor(id){

	self.id = id
    self.object = self._Create()
    self.themes = ("ayu-dark","monokai", "ambiance","mbo","dracula")
    self._Init()

    func:_Create(self){
        return(CallJs((CODEEDITOR, self.id))[0])}

    func:_Init(self){
        // dom::SetCss(".CodeMirror", "height", "auto")
        dom::SetCss(".CodeMirror", "height", "100%")

        self.SetFontPixelSize(14)
        
        style = "
        <style>
            .CodeMirror-focused .cm-matchhighlight {background: rgba(22, 53, 8, 16)}
            .CodeMirror-selection-highlight-scrollbar {background-color: rgb(149, 64, 206);}
        </style>"
        dom::Append("html > head", style)
    
    }

    func:LoadFile(self, file){
        webdevice::ReadFile(self.object, file)
    }

    func:SetFontPixelSize(self, fsize){
        dom::SetCss(".CodeMirror", "font-size", strnum(fsize) $ "px")}

    func:GetValue(self){
       return(ObjectRef(self.object, "getValue", "undefined")[0])}

    func:SetValue(self, value){
        return(ObjectRef(self.object, "setValue", map(1, value)))}

    func:LineCount(self){
       return(ObjectRef(self.object, "lineCount", "undefined")[0])}

    func:Refresh(self){
       return(ObjectRef(self.object, "refresh", "undefined")[0])}

    func:SetWidth(self, width){
       return(ObjectRef(self.object, "setSize", (width, "undefined"))[0])}

    func:SetHeight(self, height){
       return(ObjectRef(self.object, "setSize", ("undefined", height))[0])}

    func:Command(self, com){
       return(ObjectRef(self.object, "execCommand", map(1, com))[0])}

    func:SelectAll(self){self.Command("selectAll")}

    func:Undo(self){self.Command("undo")}

    func:Redo(self){self.Command("redo")}

    func:IndentAuto(self){self.Command("indentAuto")}

    func:IndentMore(self){self.Command("indentMore")}

    func:IndentLess(self){self.Command("indentLess")}

    func:ToggleComment(self){self.Command("toggleComment")}

    func:Find(self){self.Command("find")}

    func:FindNext(self){self.Command("findNext")}

    func:FindPrev(self){self.Command("findPrev")}

    func:SetOption(self, opt, status){
        return(ObjectRef(self.object, "setOption", (opt, status)))}

    func:Matchbrackets(self, status){
        return(self.SetOption("autoCloseBrackets", "matchbrackets"))}

    func:AutoCloseBrackets(self, status){
        return(self.SetOption("autoCloseBrackets", status))}

    func:ShowLineNumbers(self, status){
        return(self.SetOption("lineNumbers", status))}

    func:StyleActiveLine(self, status){
        return(self.SetOption("styleActiveLine", status))}

    func:IndentWithTabs(self, status){
        return(self.SetOption("indentWithTabs", status))}

    func:IndentUnit(self, unit){
        return(self.SetOption("indentUnit", unit))}

    func:SmartIndent(self, status){
        return(self.SetOption("smartIndent", status))}

    func:SetTheme(self, theme){
        return(self.SetOption("theme", theme))}

}