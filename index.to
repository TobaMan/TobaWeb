
import : LibWeb / webdevice
// import : LibWeb / css
import : LibWeb / dom
import : LibWeb / events
import : LibWeb / storage
import : LibWeb / widgets


enum:gPLAYGROUND{editor; panel; panedit; panlogger; logger; layoutcode; optfile; codes; modules; examples; config; info_diag}

config = ("Show line numbers",\
        "Automatic close brackets",\
        "Styling active line",\
        "Show right size panel")


modules = ("animate", "codeeditor", "css", "dom", "events", "storage", "webdevice", "widgets")
examples = ("example1", "example2","example3","example4","example5","example6","example7","example8","example9")


func:ToggleConsole(){

    isshown = 1

    if(panlogger.GetUserInfo()){
        logger.Hide()
        dom::RemoveClass(panedit.id, "h-2/3")
        dom::RemoveClass(panlogger.id, "h-1/3")
        // layoutcode.SetHeight("h-2/3")
        // panedit.FullHeight()//jgjgjgjgjgj
        layoutcode.AutoHeight()
        panedit.AutoHeight()
        panlogger.SetHeight("h-0")
        isshown = 0
    }
    else{
        logger.Show()
        dom::RemoveClass(panedit.id, "h-auto")
        dom::RemoveClass(panlogger.id, "h-0")
        panedit.SetHeight("h-2/3")
        panlogger.SetHeight("h-1/3")
        isshown = 1
    }
    panlogger.SetUserInfo(isshown)
    
}


func:PrintLog(){
    txt = ""
    logs = webdevice::GetLog()
    if(sizeof(logs)){
        l = foreach(logs){
            txt = txt $ l}
        logger.Text(txt)
    }
}

// func:OnEval(){
//     evt = events::LastEvent()
//     print(evt)
    

// 	// if(size(evt)){
// 	// 	numid = evt[0]
// 	// 	evtdata = evt[1]
// 	// 	evtype = evt[2]
// 	// 	event = GetInfo(numid).event
// 	// 	cls = GetInfo(numid).classinfo
// 	// 	if(isinst(event)){
// 	// 		evtfunc = event.GetCallback(evtype)
// 	// 		if(isfunc(evtfunc)){
// 	// 			evtfunc(cls, evtdata)}
// 	// 	}
//     // }
// }
// func:OnRun(wdg, data){
//     if(sizeof(wdg)){
//         callback(OnEval)
//         tobacode = editor.GetValue()
//         eval(tobacode)
//         PrintLog()
//     }
// }

func:OnRun(wdg, data, evt){
    if(sizeof(wdg)){
        //StopPropagation(evt)
        tobacode = editor.GetValue()
        eval(tobacode)
        PrintLog()
    }
}

func:OnOpen(wdg, data, evt){
    print(data)
}

func:OnOption(wdg, data, evt){
    option = wdg.GetUserInfo()
    if(option == "opt1"){
        webdevice::Trigger(optfile.id, "click")
    }
    if(option == "new"){editor.SetValue(" ")}
    if(option == "undo"){editor.Undo()}
    if(option == "redo"){editor.Redo()}
    if(option == "indent-less"){editor.IndentLess()}
    if(option == "indent-more"){editor.IndentMore()}
    if(option == "indent-auto"){editor.IndentAuto()}
    if(option == "comment"){editor.ToggleComment()}
    if(option == "find"){editor.Find()}
    if(option == "find-next"){editor.FindNext()}
    if(option == "find-prev"){editor.FindPrev()}
    if(option == "settings"){info_diag.ShowModal()}
    if(option == "console"){ToggleConsole()}
    if(option == "panel"){panel.Toggle()}

}

func:OnConfig(wdg, data, evt){
    conf = wdg.GetUserInfo()
    status = wdg.IsChecked()
    if(conf == 0){
        editor.ShowLineNumbers(status)}
    if(conf == 1){
        editor.AutoCloseBrackets(status)}
    if(conf == 2){
        editor.StyleActiveLine(status)}
    if(conf == 3){
        panel.Toggle()}
}

func:OnModule(wdg, data, evt){
    editor.LoadFile("LibWeb/" $ data $ ".to")
}

func:OnExample(wdg, data, evt){
    editor.LoadFile("Examples/" $ data $ ".to")
}

func:OnApplicationTheme(wdg, data, evt){
    widgets::ChangeAppTheme(wdg.GetUserInfo())
}

func:OnCodeEditorTheme(wdg, data, evt){
    editor.SetTheme(wdg.GetUserInfo())
}


func:InfoDialog(){
    diag = wModalDialog(dom::IdRoot())
    diag.ScreenWidth()
    diag.ScreenHeight()
    diag.BorderColor("base-300")
    mb = wModalBox(diag)
    llayout = wVerticalLayout(mb)
    tlayout = wHorizontalLayout(llayout)
    icon = wPngAssets(tlayout, "settings")
    icon.FitWidth()
    icon.FitHeight()
    icon.Margin("m-2")
    title = wLabel(tlayout, "Playground configuration")
    title.FontSize().Bold()
    title.Margin("m-2")
    div = wVerticalDivider(llayout)
    idcf = for(0, size(config), 1){
        cf = config[idcf]
        layout = wHorizontalLayout(llayout)
        layout.Margin("m-2")
        pan = wPanel(layout)
        tx = wLabel(pan, cf)
        tgl = wToggle(layout)
        tgl.SetUserInfo(idcf)
        tgl.EventMouseClick(OnConfig)
    }
    // layout = wHorizontalLayout(llayout)
    // layout.Margin("m-2")
    // pan = wPanel(layout)
    // tx = wLabel(pan, "Application Themes")
    // cbtheme = Combo(layout, GetThemeList())
    // cbtheme.Margin("m-1")
    // cbtheme.Small()
    // cbtheme.EventChange(OnApplicationTheme)


    cedthemes = ("default", "ayu-dark", "ayu-mirage", \
        "monokai", "ambiance","mbo","bespin", \
        "blackboard", "lucario", "material", \
        "material-darker", "material-palenight",\
        "material-ocean", "nord", "railscasts",\
        "icecoder", "eclipse" )
    // layout = wHorizontalLayout(llayout)
    // layout.Margin("m-2")
    // pan = wPanel(layout)
    // tx = wLabel(pan, "Code editor Themes")
    // cbedtheme = Combo(layout, cedthemes)
    // cbedtheme.Margin("m-1")
    // cbedtheme.Small()
    // cbedtheme.EventChange(OnCodeEditorTheme)

    collapse = CollapseList(llayout,\
        "Code editor Themes", cedthemes,\
        OnCodeEditorTheme)
    collapse.AddClass("collapse-arrow")
    //collapse.AddClass("collapse-plus")
    collapse.AddClass("border")
    collapse.BackgroundColor("base-200")
    collapse.BorderColor("base-300")
    collapse.Margin("m-1")

    collapse = CollapseList(llayout,\
        "Application Themes", GetThemeList(),\
        OnApplicationTheme)
    collapse.AddClass("collapse-arrow")
    //collapse.AddClass("collapse-plus")
    collapse.AddClass("border")
    collapse.BackgroundColor("base-200")
    collapse.BorderColor("base-300")
    collapse.Margin("m-1")

    ma = wForm(wModalAction(mb))
    quit = wTextButton(ma, "Close")
    return(diag)
}


func:Option(parent, txt, icon){
    t = wButton(parent)
    t.Small()
    t.Ghost()
    t.BorderColor("base-300")
    p = wPngAssets(t, icon)
    p.PointerEventNone()
    t.Margin("m-1")
    t.SetUserInfo(txt)
    t.EventMouseClick(OnOption)
    return(t)
}


func:Playground(){

    ChangeAppTheme("dark")

    vlayout = widgets::wVerticalWindowLayout
    hlayout = widgets::wHorizontalWindowLayout

    
    lpv = vlayout(dom::IdRoot())

    barp = widgets::wLayoutPanel(lpv)
    barp.SetName("barp")
    bar = hlayout(barp)
    bar.SetName("bar")
    bar.Overflow().AutoX()
    dom::RemoveClass(bar.id, "w-full")
    bar.AutoWidth()
    bar.Margin("m-2")

    brun = wButton(bar)
    p = wPngAssets(brun, "run")
    p.PointerEventNone()
    brun.Small()
    brun.Margin("m-1")
    brun.BorderColor("base-300")
    brun.EventMouseClick(OnRun)

    optfile = wInputFile(Option(bar,"opt1", "file-code"))
    optfile.EventChange(OnOpen)

    Option(bar,"new", "new")
    Option(bar,"undo", "undo")
    Option(bar,"redo", "redo")
    Option(bar,"comment", "comment")
    Option(bar,"indent-less", "indent-less")
    Option(bar,"indent-more", "indent-more")
    Option(bar,"indent-auto", "indent-auto")
    // Option(bar,"find", "find")
    // Option(bar,"find-prev", "find-prev")
    // Option(bar,"find-next", "find-next")
    Option(bar,"console", "console")
    Option(bar,"panel", "panel")
    Option(bar,"settings", "settings")

    cbmodules = Combo(bar, modules)
    cbmodules.Margin("m-1")
    cbmodules.Small()
    cbmodules.EventChange(OnModule)

    cbexamples = Combo(bar, examples)
    cbexamples.Margin("m-1")
    cbexamples.Small()
    cbexamples.EventChange(OnExample)

    
    lph = hlayout(lpv)
    lph.Overflow().AutoY()

    layoutcode = vlayout(lph)
    layoutcode.SetName("layoutcode")
    layoutcode.AutoWidth()

    panedit = widgets::wLayoutPanel(layoutcode)
    panedit.SetName("panedit")
    panedit.BackgroundColor("base-200")
    panedit.AutoWidth()
    panedit.SetHeight("h-2/3")
    panedit.Margin("m-1")
    editor = panedit.CodeEditor()
    editor.ShowLineNumbers(TRUE)
    editor.IndentWithTabs(TRUE)
    editor.SmartIndent(TRUE)
    editor.IndentUnit(4)
    editor.SetTheme("ayu-dark")
    editor.LoadFile("index.to")

    panlogger = widgets::wLayoutPanel(layoutcode)
    panlogger.SetName("panlogger")
    panlogger.BackgroundColor("base-200")
    panlogger.AutoWidth()
    panlogger.SetHeight("h-1/3")
    panlogger.Margin("m-1")
    panlogger.SetUserInfo(1)
    logger = wTextArea(panlogger)
    ToggleConsole()

    // panedit.FitHeight()
    // panlogger.SetHeight("h-0")
    

    // dom::SetCss(".CodeMirror", "height", "auto")
    // dom::SetCss(".CodeMirror", "font-size", "16px")
    // dom::SetCss(".cm-matchhighlight", "background", "red !important")
    // dom::SetCss(".cm-wrap", "height", "100%")
    // dom::SetCss(".cm-scroller", "overflow", "auto")


    panel = widgets::wLayoutPanel(lph)
    panel.BackgroundColor("base-200")
    panel.FullWidth()
    panel.Margin("m-1")
    panel.Hide()

    // layoutcode.AddClass("split")
    // panedit.Split(panlogger, "vertical")
    // lph.AddClass("split")
    // layoutcode.Split(panel, "horizontal")
   
    widgets::Render(FALSE)
    
}

// print("Start Application ...")

info_diag = InfoDialog()

Playground()








